// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: courses.sql

package learnings

import (
	"context"

	"github.com/google/uuid"
)

const addCourse = `-- name: AddCourse :one
INSERT INTO
    courses (id, is_active, course_name)
VALUES
    ($1, $2, $3) RETURNING id, category_id, is_active, course_name
`

type AddCourseParams struct {
	ID         uuid.UUID
	IsActive   bool
	CourseName string
}

func (q *Queries) AddCourse(ctx context.Context, arg AddCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, addCourse, arg.ID, arg.IsActive, arg.CourseName)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.IsActive,
		&i.CourseName,
	)
	return i, err
}

const listCourses = `-- name: ListCourses :many
SELECT
    id, category_id, is_active, course_name
FROM
    courses
`

func (q *Queries) ListCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, listCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.IsActive,
			&i.CourseName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
